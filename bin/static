#!/usr/bin/env julia --color=yes
using Kip
@use "github.com/jkroso/SimpleCLI.jl" @CLI
import Sockets: listen, listenany, localhost, IPAddr

"""
Serve <directory> on <port>. If you don't define a port one will be selected
randomly and printed to STDOUT
"""
@CLI (directory::String; port::Integer=get(ENV,"PORT",0), addr::String="localhost")

host = addr == "localhost" ? localhost : parse(IPAddr, addr)

const p, server = if port != 0
  port, listen(host, port)
else
  listenany(host, 3000)
end

const path = abspath(directory)
const root = isdir(path) ? path : dirname(path)

# use late so we connect to the port ASAP
@use "github.com/jkroso/HTTP.jl/server" handle_requests
@use "github.com/jkroso/Browserify.jl" compile ReadFile WriteFile compiled_extension
@use "github.com/jkroso/DOM.jl" => DOM @dom @css_str need
@use "github.com/jkroso/DOM.jl/html"
@use "github.com/coiljl/static" static
@use "github.com/coiljl/logger" logger
using Dates

const f = relpath(path, root)
const domain = host == localhost ? "localhost" : host
run(`open http://$domain:$p/$(f == "." ? "" : f)`)

transform(path::String) = begin
  rel = relpath(path, root)
  if isdir(path)
    out = tempname()*".html"
    open(out, "w") do io
      show(io, MIME("text/html"), @dom[:html
        [:head
          [:title titlecase(replace(path, "-"=>" "))]
          need(DOM.css[])]
        [:body
          [:div css"max-width: 50em; margin: 1em auto; display: flex; height: 100%; font-family: verdana"
            @dom[:div css"""
                      display: flex
                      align-self: center
                      flex-direction: column
                      margin: 10px auto
                      width: max-content
                      border: 1px solid lightgrey
                      border-radius: 3px
                      """
              (render_row(name, rel, path) for name in readdir(path))...]]]])
    end
    out
  else
    file = ReadFile(path)
    outpath = joinpath(tempdir(), rel)
    outdir = dirname(outpath)
    ispath(outdir) || mkpath(outdir)
    out = WriteFile(splitext(outpath)[1] * compiled_extension(file))
    compile(file, out)
    close(out.io)
    string(out.path)
  end
end

isimage(s) = s in [".svg", ".jpg", ".jpeg", ".png", ".ico", ".gif"]
loadsvg(name) = parse(MIME("text/html"), read("$(@dirname)/$name.svg", String))

datasize(value::Number) = begin
  power = max(1, round(Int, value > 0 ? log10(value) : 3) - 2)
  suffix = ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"][power]
  string(round(Int, 1e3*value / 1e3^power), suffix)
end

render_row(name, rel, dir) = begin
  path = joinpath(dir, name)
  data = stat(path)
  class = css"""
  display: inline-flex
  align-items: center
  padding: 5px 10px
  > svg {margin-right: 10px}
  > span {margin: 0 0 0 10px}
  """
  if isdir(data)
    @dom[:span class=class loadsvg("file-directory") [:a href=string(joinpath(rel, name)) name "/"]]
  else
    type = if islink(data)
      loadsvg("file-symlink-file")
    elseif isimage(splitext(name)[2])
      loadsvg("image")
    else
      loadsvg("file")
    end
    @dom[:span class=class
      type
      [:a href=string(joinpath(rel, name)) name]
      [:span datasize(data.size)]
      [:span Dates.format(unix2datetime(data.mtime), "HH:MM d/m/yyyy")]]
  end
end

handle_requests(logger(static(root, transform=transform, index="index.jl")), server)
