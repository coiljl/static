#!/usr/bin/env julia --color=yes
using Kip
@use "github.com/jkroso/SimpleCLI.jl" @CLI
import Sockets: listen, listenany, localhost, IPAddr

"""
Serve <directory> on <port>. If you don't define a port one will be selected
randomly and printed to STDOUT
"""
@CLI (directory::String; port::Integer=get(ENV,"PORT",0), addr::String="localhost")

host = addr == "localhost" ? localhost : parse(IPAddr, addr)

const p, server = if port != 0
  port, listen(host, port)
else
  listenany(host, 3000)
end

const path = abspath(directory)
const root = isdir(path) ? path : dirname(path)

# use late so we connect to the port ASAP
@use "github.com/jkroso/HTTP.jl/server" handle_requests
@use "github.com/jkroso/Browserify.jl" compile ReadFile WriteFile compiled_extension
@use "github.com/coiljl/static" static
@use "github.com/coiljl/logger" logger

const f = relpath(path, root)
const domain = host == localhost ? "localhost" : host
run(`open http://$domain:$p/$(f == "." ? "" : f)`)

transform(path::String) = begin
  file = ReadFile(path)
  rel = relpath(path, root)
  outpath = joinpath(tempdir(), rel)
  outdir = dirname(outpath)
  ispath(outdir) || mkpath(outdir)
  out = WriteFile(splitext(outpath)[1] * compiled_extension(file))
  compile(file, out)
  close(out.io)
  string(out.path)
end

handle_requests(logger(static(root, transform=transform, index="index.jl")), server)
